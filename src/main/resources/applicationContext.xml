<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       default-lazy-init="true">

    <context:property-placeholder ignore-resource-not-found="true" location="classpath:setup.development.properties"/>
    <!--<import resource="classpath*:conf/rabbitMQ.xml" />-->
    <!-- 根据@Pointcut注解定义的切点来自动代理相匹配的Bean -->
    <aop:aspectj-autoproxy/>

    <!-- 配置在java类中能够使用Annotation -->
    <!--<context:annotation-config/>-->
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.tpadsz.ssm"/>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven proxy-target-class="true"/>

    <!--<bean id="exampleJob2" class="com.tpadsz.ssm.test.Job"></bean>-->
    <!--<bean id="exampleJob2Detail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
    <!--&lt;!&ndash; 指定任务类 &ndash;&gt;-->
    <!--<property name="targetObject" ref="exampleJob2"/>-->
    <!--&lt;!&ndash; 指定任务执行的方法 &ndash;&gt;-->
    <!--<property name="targetMethod" value="execute"/>-->
    <!--</bean>-->
    <!--<bean id="exampleJob2Trigger"-->
    <!--class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
    <!--<property name="jobDetail" ref="exampleJob2Detail"/>-->
    <!--&lt;!&ndash; 每10秒运行一次 &ndash;&gt;-->
    <!--<property name="cronExpression" value="5/15 * * * * ?"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
    <!--<property name="triggers">-->
    <!--<list>-->
    <!--&lt;!&ndash;<ref bean="exampleJobTrigger" /> &ndash;&gt;-->
    <!--<ref bean="exampleJob2Trigger"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <bean name="memcachedClient" destroy-method="shutdown"
          class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean">
        <property name="servers">
            <value>${memcached.url}</value>
        </property>
        <property name="sessionLocator">
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"/>
        </property>
        <property name="transcoder">
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"/>
        </property>
    </bean>

    <!-- XMemcached客户端 -->
    <bean id="xMemcachedClient" class="com.tpadsz.ssm.utils.XMemcachedClient">
        <property name="memcachedClient" ref="memcachedClient"/>
        <property name="optTimeout" value="1000"/>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.minsize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxsize}"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="false"/>
        <property name="filters" value="stat"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:/mapping/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="com.tpadsz.ssm.model"/>
        <property name="configLocation" value="classpath:/mybatisConfig.xml"/>
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:sqlSessionFactoryBeanName="sqlSessionFactory" p:basePackage="com.tpadsz.ssm.dao"/>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"></constructor-arg>
    </bean>

    <!-- JDBC 事务管理器, 在service层面上实现事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- propagation 默认为requeired isolation 默认为default 所以下面这两项 默认的话可以不配 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="true"/>
            <!-- 剩下的其他方法. -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!-- aop配置 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.tpadsz.ssm.service..*(..))"/>
        <!-- advisor是切入点通知(既包含切入点,有包含通知) -->
        <!-- order 表示AOP的执行顺序, 对于同一个方法配置了order时 , order越低, 优先级越高. -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>

    <!-- 配置Jedis的 缓冲池 -->
    <bean id="JedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxIdle="6" p:minEvictableIdleTimeMillis="300000"
          p:numTestsPerEvictionRun="3" p:timeBetweenEvictionRunsMillis="60000">
    </bean>


    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnFactory">
        <property name="defaultSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <!--<beans profile="development">-->
    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>

    <!-- 开发环境配置文件 -->
    <!--<beans profile="development">-->
        <!--<context:property-placeholder location="classpath*:setup.development.properties,classpath:common.properties"/>-->
    <!--</beans>-->
    <!--&lt;!&ndash; 测试环境配置文件 &ndash;&gt;-->
    <!--<beans profile="demo">-->
        <!--<context:property-placeholder location="classpath*:setup.demo.properties,classpath:common.properties"/>-->
    <!--</beans>-->
    <!--&lt;!&ndash; 生产环境配置文件 &ndash;&gt;-->
    <!--<beans profile="production">-->
        <!--<context:property-placeholder location="classpath*:setup.production.properties,classpath:common.properties"/>-->
    <!--</beans>-->

</beans>





